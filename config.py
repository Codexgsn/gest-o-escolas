import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

class Config:
    """Configura√ß√£o base da aplica√ß√£o"""
    SECRET_KEY = os.environ.get('SECRET_KEY', 'chave-temporaria-desenvolvimento')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    REMEMBER_COOKIE_DURATION = 0
    SESSION_PERMANENT = False

class DevelopmentConfig(Config):
    """Configura√ß√£o para desenvolvimento local"""
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///reserva_salas.db'

class ProductionConfig(Config):
    """Configura√ß√£o para produ√ß√£o (Render)"""
    DEBUG = False
    
    # Configura√ß√£o do banco para produ√ß√£o
    DATABASE_URL = os.environ.get('DATABASE_URL')
    print(f"üîç DATABASE_URL do ambiente: {DATABASE_URL}")
    
    # Verificar se psycopg est√° dispon√≠vel
    try:
        import psycopg
        psycopg_available = True
        print("‚úÖ psycopg dispon√≠vel")
    except ImportError:
        psycopg_available = False
        print("‚ö†Ô∏è psycopg n√£o dispon√≠vel, usando SQLite")
    
    print(f"üîç Condi√ß√µes: DATABASE_URL={bool(DATABASE_URL)}, starts_with_postgres={DATABASE_URL.startswith('postgres://') if DATABASE_URL else False}, starts_with_postgresql={DATABASE_URL.startswith('postgresql://') if DATABASE_URL else False}, psycopg_available={psycopg_available}")
    
    if DATABASE_URL and (DATABASE_URL.startswith('postgres://') or DATABASE_URL.startswith('postgresql://')) and psycopg_available:
        # Render usa postgres:// mas SQLAlchemy espera postgresql://
        # FOR√áA o uso do dialeto psycopg (vers√£o 3)
        if DATABASE_URL.startswith('postgres://'):
            DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql+psycopg://', 1)
        elif DATABASE_URL.startswith('postgresql://'):
            DATABASE_URL = DATABASE_URL.replace('postgresql://', 'postgresql+psycopg://', 1)
        print(f"‚úÖ URL do banco configurada: {DATABASE_URL}")
        
        # Configura√ß√µes espec√≠ficas para PostgreSQL com psycopg
        SQLALCHEMY_ENGINE_OPTIONS = {
            'connect_args': {
                'connect_timeout': 10,
                'application_name': 'gest-o-escolas'
            }
        }
    else:
        # Usar SQLite se psycopg n√£o estiver dispon√≠vel
        DATABASE_URL = None
        SQLALCHEMY_ENGINE_OPTIONS = {}
        print("‚ö†Ô∏è Usando SQLite (psycopg n√£o dispon√≠vel)")
    
    SQLALCHEMY_DATABASE_URI = DATABASE_URL or 'sqlite:///reserva_salas.db'
    print(f"SQLALCHEMY_DATABASE_URI final: {SQLALCHEMY_DATABASE_URI}")

# Configura√ß√£o padr√£o baseada no ambiente
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': ProductionConfig  # Mudei para production por padr√£o
}

def get_config():
    """Retorna a configura√ß√£o baseada no ambiente"""
    env = os.environ.get('FLASK_ENV', 'production')  # Mudei para production por padr√£o
    print(f"Ambiente configurado: {env}")
    return config.get(env, config['default'])
